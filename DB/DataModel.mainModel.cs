//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 20/05/2021 16:33:27
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System.Linq;
using mainModel;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;

namespace RealCommerce.DB
{

    public partial class mainModel : DbContext
    {

        public mainModel() :
            base()
        {
            OnCreated();
        }

        public mainModel(DbContextOptions<mainModel> options) :
            base(options)
        {
            OnCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured ||
                (!optionsBuilder.Options.Extensions.OfType<RelationalOptionsExtension>().Any(ext => !string.IsNullOrEmpty(ext.ConnectionString) || ext.Connection != null) &&
                 !optionsBuilder.Options.Extensions.Any(ext => !(ext is RelationalOptionsExtension) && !(ext is CoreOptionsExtension))))
            {
                optionsBuilder.UseSqlite(@"Data Source=D:\www\RealCommerce\DB\db.sqlite");
            }
            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }

        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        public virtual DbSet<Favorite> Favorites
        {
            get;
            set;
        }

        public virtual DbSet<City> Cities
        {
            get;
            set;
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            this.FavoriteMapping(modelBuilder);
            this.CustomizeFavoriteMapping(modelBuilder);

            this.CityMapping(modelBuilder);
            this.CustomizeCityMapping(modelBuilder);

            RelationshipsMapping(modelBuilder);
            CustomizeMapping(ref modelBuilder);
        }

        #region Favorite Mapping

        private void FavoriteMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Favorite>().ToTable(@"Favorites");
            modelBuilder.Entity<Favorite>().Property(x => x.Id).HasColumnName(@"Id").HasColumnType(@"INTEGER").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Favorite>().Property(x => x.CityId).HasColumnName(@"CityId").HasColumnType(@"INTEGER").ValueGeneratedNever();
            modelBuilder.Entity<Favorite>().HasKey(@"Id");
        }

        partial void CustomizeFavoriteMapping(ModelBuilder modelBuilder);

        #endregion

        #region City Mapping

        private void CityMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<City>().ToTable(@"Cities");
            modelBuilder.Entity<City>().Property(x => x.Id).HasColumnName(@"Id").HasColumnType(@"INTEGER").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<City>().Property(x => x.CityName).HasColumnName(@"CityName").HasColumnType(@"VARCHAR").ValueGeneratedNever();
            modelBuilder.Entity<City>().Property(x => x.Weather).HasColumnName(@"Weather").HasColumnType(@"INTEGER").ValueGeneratedNever();
            modelBuilder.Entity<City>().Property(x => x.CityKey).HasColumnName(@"CityKey").HasColumnType(@"VARCHAR").ValueGeneratedNever();
            modelBuilder.Entity<City>().Property(x => x.WeatherDate).HasColumnName(@"WeatherDate").HasColumnType(@"DATE").ValueGeneratedNever();
            modelBuilder.Entity<City>().Property(x => x.WeatherTime).HasColumnName(@"WeatherTime").HasColumnType(@"TIME").ValueGeneratedNever();
            modelBuilder.Entity<City>().Property(x => x.WeatherText).HasColumnName(@"WeatherText").HasColumnType(@"TEXT").ValueGeneratedNever();
            modelBuilder.Entity<City>().HasKey(@"Id");
        }

        partial void CustomizeCityMapping(ModelBuilder modelBuilder);

        #endregion

        private void RelationshipsMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Favorite>().HasMany(x => x.Cities).WithOne(op => op.Favorite).HasPrincipalKey(@"CityId").HasForeignKey(@"Id").IsRequired(true);

            modelBuilder.Entity<City>().HasOne(x => x.Favorite).WithMany(op => op.Cities).HasPrincipalKey(@"CityId").HasForeignKey(@"Id").IsRequired(true);
        }

        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }

        partial void OnCreated();
    }
}
